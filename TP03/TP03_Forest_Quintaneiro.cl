;; Liste d'attributs :
; - espece : humain, reptiles, singes, autres
; - cheveux : blond, chatain, chauve, brun, rouge
; - couvre_chef : casquette, couronne, rien
; - yeux : bleus, noirs, jaunes
; - sexe : homme, femme, autre
; - dents : visibles, invisibles
; - oreilles : V/F
; - camp : gentil / méchant
; - peau : blanche / verte / jaune / marron / rouge / grise
; - moustache : V/F




; Chainage avant : J'ai les yeux bleus, je suis un humain, je suis une femme qui suis-je ? 


(defparameter *BR* '(
             (R1 ((yeux bleus) (sexe femme)) (espece humain))
             (R2 ((couvre_chef) (yeux bleus)) (espece humain))
             (R3 ((couvre_chef couronne) (yeux bleus)) (espece humain))
             (R4 ((couvre_chef couronne) (yeux bleus)) (sexe femme))
             (R5 ((yeux jaunes)) (nom Skelerex))
             ;(R6 ((dents pas_visibles) (espece humain)) (sexe femme))
             (R7 ((espece reptile) (nom (not Yoshi))) (camp méchant))
             (R8 ((moustache V) (couvre_chef casquette)) (espece humain))
             (R9 ((moustache V) (couvre_chef rien)) (nom Topi-Taupe))
             (R10 ((espece humain)) (peau blanche))
             (R11 ((camp méchant) (peau jaune) (couvre_chef casque)) (nom Frere-Marto))
             (R12 ((moustache V) (espece humain)) (sexe homme))
             (R13 ((peau blanche) (camp méchant) (cheveux aucuns)) (nom Boo))
             (R14 ((dents visibles) (peau jaune)) (camp méchant))
             (R15 ((couvre_chef casquette) (espece singe)) (nom Didi-Kong))
             (R16 ((dents visibles) (camp méchant) (peau rouge)) (nom Pom-Pom))
             (R17 ((peau marron) (camp gentil) (dents visibles)) (nom Topi-Taupe))
             (R18 ((espece singe) (dents visibles) (camp méchant)) (nom Donkey-Kong))
             (R19 ((peau verte)) (nom Yoshi))
             (R20 ((peau jaune)) (espece reptile))
             (R21 ((espece reptile) (peau (not jaune)) (cheveux (not oranges))) (nom Yoshi))
             (R22 ((moustache V) (peau blanche)) (espece humain))
             (R23 ((peau jaune) (mince F) (camp méchant) (cheveux rouges)) (nom Bowser))
             (R24 ((moustache V) (espece humain)) (peau blanche))
             (R25 ((peau blanche) (espece humain) (sexe homme)) (moustache V))
             (R26 ((moustache V) (peau blanche)) (sexe homme))
             (R27 ((couvre_chef couronne)) (camp gentil))
             (R28 ((mince F)) (camp méchant))
             (R29 ((cheveux blonds)) (sexe femme))
             (R30 ((cheveux blonds)) (espece humain))
             (R31 ((dents visibles) (espece singe)) (nom Donkey-Kong))
             (R32 ((moustache V) (espece autre)) (nom Topi-Taupe))
             (R33 ((dents pas_visibles) (espece singe)) (nom Diddy-Kong))
             (R34 ((dents pas_visibles) (couvre_chef casquette) (peau marron)) (nom Diddy-Kong))
             (R35 ((espece humain) (dents pas_visibles) (camp gentil) (sexe homme)) (nom Luigi))
             (R36 ((espece humain) (dents visibles) (camp gentil)) (nom Mario))
             (R37 ((espece humain) (mince F)) (nom Wario))
             (R38 ((espece humain) (mince V) (camp méchant)) (nom Waluigi))
             (R39 ((couvre_chef couronne) (cheveux chatains)) (nom Daisy))
             (R40 ((couvre_chef couronne) (cheveux blonds) (yeux bleus)) (nom Peach))
             (R41 ((couvre_chef couronne) (cheveux blonds_clairs)) (nom Harmonie))
             (R42 ((espece reptile) (camp gentil)) (nom Yoshi))
             (R43 ((espece reptile) (mince F) (sexe homme)) (nom Bowser))
             (R44 ((espece autre) (peau marron) (moustache F)) (nom Goomba))
             (R45 ((peau rouge) (yeux noirs) (espece autre)) (nom Maskass))
             (R46 ((couvre_chef casque) (espece reptile)) (nom Frere-Marto))
             (R47 ((couvre_chef aucun) (peau jaune) (dents pas_visibles)) (nom Koopa))
             (R48 ((espece reptile) (camp méchant) (sexe homme) (mince V) (dents visibles)) (nom Bowser-Jr))
             (R49 ((peau grise)) (nom Skelerex))
             (R50 ((yeux jaunes)) (nom Skelerex))
             (R51 ((espece reptile) (sexe femme)) (nom Pom-Pom))
             (R52 ((peau rouge) (sexe femme)) (nom Pom-Pom))
             (R53 ((peau rouge) (dents visibles)) (nom Pom-Pom))
             (R54 ((peau rouge) (sexe autre)) (nom Maskass))
             (R55 ((peau rouge) (dents pas_visibles)) (nom Maskass))
             (R56 ((peau (not verte)) (espece reptile)) (camp méchant))
             (R57 ((peau jaune)) (camp méchant))
             (R58 ((sexe femme) (camp gentil)) (couvre_chef couronne))
             (R59 ((sexe femme) (camp gentil)) (yeux bleus))
             (R60 ((peau jaune) (cheveux rouges)) (couvre_chef aucun))
             (R61 ((peau jaune)) (sexe homme))
             (R62 ((peau jaune) (cheveux rouges)) (dents visibles))
             (R63 ((peau jaune)) (camp méchant))
             (R64 ((espece reptile) (camp méchant) (dents pas_visibles)) (peau jaune))
             (R65 ((couvre_chef casque)) (nom Frere-Marto))
             (R66 ((cheveux oranges)) (nom Pom-Pom))
             

               ))


(defparameter *BR2* '(
              (R52 ((espece humain) (peau blanche) (cheveux bruns) (couvre_chef casquette) (yeux bleus) (sexe homme) (dents visibles) (camp gentil) (moustache V) (mince V)) (nom Mario))
              (R53 ((espece humain) (peau blanche) (cheveux bruns) (couvre_chef casquette) (yeux bleus) (sexe homme) (dents pas_visibles) (camp gentil) (moustache V) (mince V)) (nom Luigi))
              (R54 ((espece humain) (peau blanche) (cheveux blonds) (couvre_chef couronne) (yeux bleus) (sexe femme) (dents pas_visibles) (camp gentil) (moustache F) (mince V)) (nom Peach))
              (R55 ((espece humain) (peau blanche) (cheveux chatains) (couvre_chef couronne) (yeux bleus) (sexe femme) (dents pas_visibles) (camp gentil) (moustache F) (mince V)) (nom Daisy))
              (R56 ((espece humain) (peau blanche) (cheveux chatains) (couvre_chef casquette) (yeux noirs) (sexe homme) (dents visibles) (camp méchant) (moustache V) (mince F)) (nom Wario))
              (R57 ((espece humain) (peau blanche) (cheveux chatains) (couvre_chef casquette) (yeux noirs) (sexe homme) (dents visibles) (camp méchant) (moustache V) (mince V)) (nom Waluigi))
              (R58 ((espece reptile) (peau verte) (cheveux chauve) (couvre_chef aucun) (yeux bleus) (sexe autre) (dents pas_visibles) (camp gentil) (moustache F) (mince V)) (nom Yoshi))
              (R59 ((espece humain) (peau blanche) (cheveux blonds_clairs) (couvre_chef couronne) (yeux bleus) (sexe femme) (dents pas_visibles) (camp gentil) (moustache F) (mince V)) (nom Harmonie))
              (R60 ((espece singe) (peau marron) (cheveux chatains) (couvre_chef aucun) (yeux noirs) (sexe homme) (dents visibles) (camp méchant) (moustache F) (mince F)) (nom Donkey-Kong))
              (R61 ((espece singe) (peau marron) (cheveux chatains) (couvre_chef casquette) (yeux noirs) (sexe homme) (dents pas_visibles) (camp gentil) (moustache F) (mince V)) (nom Diddy-Kong))
              (R62 ((espece reptile) (peau jaune) (cheveux rouges) (couvre_chef aucun) (yeux rouges) (sexe homme) (dents visibles) (camp méchant) (moustache F) (mince F)) (nom Bowser))
              (R63 ((espece autre) (peau marron) (cheveux chauve) (couvre_chef aucun) (yeux noirs) (sexe autre) (dents visibles) (camp méchant) (moustache F) (mince F)) (nom Goomba))
              (R64 ((espece autre) (peau rouge) (cheveux chauve) (couvre_chef aucun) (yeux noirs) (sexe autre) (dents pas_visibles) (camp méchant) (moustache F) (mince V)) (nom Maskass))
              (R65 ((espece reptile) (peau jaune) (cheveux chauve) (couvre_chef aucun) (yeux verts) (sexe homme) (dents pas_visibles) (camp méchant) (moustache F) (mince V)) (nom Koopa))
              (R66 ((espece autre) (peau marron) (cheveux chauve) (couvre_chef aucun) (yeux noirs) (sexe autre) (dents visibles) (camp gentil) (moustache V) (mince F)) (nom Topi-Taupe))
              (R67 ((espece reptile) (peau jaune) (cheveux rouges) (couvre_chef aucun) (yeux noirs) (sexe homme) (dents visibles) (camp méchant) (moustache F) (mince V)) (nom Bowser-Jr))
              (R68 ((espece autre) (peau blanche) (cheveux chauve) (couvre_chef aucun) (yeux noirs) (sexe autre) (dents visibles) (camp méchant) (moustache F) (mince F)) (nom Boo))
              (R69 ((espece reptile) (peau jaune) (cheveux chauve) (couvre_chef casque) (yeux bleus) (sexe homme) (dents pas_visibles) (camp méchant) (moustache F) (mince V)) (nom Frere-Marto))
              (R70 ((espece reptile) (peau grise) (cheveux chauve) (couvre_chef aucun) (yeux jaunes) (sexe autre) (dents pas_visibles) (camp méchant) (moustache F) (mince V)) (nom Skelerex))
              (R71 ((espece reptile) (peau rouge) (cheveux oranges) (couvre_chef aucun) (yeux noirs) (sexe femme) (dents visibles) (camp méchant) (moustache F) (mince F)) (nom Pom-Pom))
		))



(defun getPremisses (regle)
  (cadr regle))

;(getPremisses '(R3 ((couvre_chef couronne) (yeux bleus)) (espece humain)))

(defun getCcl (regle)
  (caddr regle))

;(getCcl '(R3 ((couvre_chef couronne) (yeux bleus)) (espece humain)))

(defun getNum (regle)
  (car regle))

;(getNum '(R3 ((couvre_chef couronne) (yeux bleus)) (espece humain)))


(defun liste-membre-p (sous-liste liste) ; Verifie qu'une sous-liste est présente dans une liste
  (cond
   ((null liste) nil)
   ((equal sous-liste (car liste)) t)
   ((equal (car sous-liste) (caar liste))
           (if (listp (cadr sous-liste)) ;; Cas ou il y a un "not" : ex: (nom (not Yoshi))
               (not (equal (cadadr sous-liste) (cadar liste)))))
   (t (liste-membre-p sous-liste (cdr liste)))))

;(liste-membre-p '(PEAU jaune) '((espece reptile) (peau jaune)))
;(liste-membre-p '(couvre_chef casque) '((cheveux chatains) (couvre_chef casquette)))
;(liste-membre-p '(peau (not jaune)) '((peau verte)))


(defun satisfaites-p (premisses base-de-faits)
  (cond
   ((null premisses) t) ; si la liste est vide, toutes les prémisses sont satisfaites
   ((liste-membre-p (car premisses) base-de-faits) ; si la prémisse est dans la base de faits, on vérifie la prochaine prémisse
    (satisfaites-p (cdr premisses) base-de-faits))
   (t nil))) ; sinon, toutes les prémisses ne sont pas satisfaites

;(satisfaites-p '((peau jaune) (camp méchant)) '((peau jaune) (espece reptile) (camp méchant)))



(defun choose-random-element (liste)
  (nth (random (length liste)) liste))

(defun remove-useless-attributes (liste bdf)
  (let ((new_liste))
    (dolist (x liste new_liste)
      (if (not (assoc x bdf))
          (push x new_liste)))))

(defun get-value (min max)
  (let ((choix (read)))
    (loop while (or (not (numberp choix)) (< choix min) (> choix max))
        do
          (format t "~%Choix incorrect, veuillez réessayer : ")
          (setq choix (read)))
    choix))

;(choose-random-element all_attributes)

(defun deviner-personnage-ia (bdf attributes)
  (setq attributes (remove-useless-attributes attributes bdf)) ; on retire les attributs déjà présents dans la bdf
  (let ((attribute (choose-random-element attributes)) val)
    (progn
      ;(print attributes)
      (cond
       ((equal attribute 'espece)
        (format t "~%De quelle espèce est le personnage ?")
        (format t "~%~t1. Humain")
        (format t "~%~t2. Singe")
        (format t "~%~t3. Reptile")
        (format t "~%~t4. Autre")
        (format t "~%Choisissez une option : ")
        (let ((choix2 (get-value 1 4)))
          (cond
           ((= choix2 1) (setq val 'humain))
           ((= choix2 2) (setq val 'singe))
           ((= choix2 3) (setq val 'reptile))
           ((= choix2 4) (setq val 'autre)))))
       ((equal attribute 'peau)
        (format t "~%Quelle est la couleur de peau du personnage ?")
        (format t "~%~t1. Blanche")
        (format t "~%~t2. Grise")
        (format t "~%~t3. Jaune")
        (format t "~%~t4. Verte")
        (format t "~%~t5. Rouge")
        (format t "~%~t6. Marron")
        (format t "~%Choisissez une option : ")
        (let ((choix2 (get-value 1 6)))
          (cond
           ((= choix2 1) (setq val 'blanche))
           ((= choix2 2) (setq val 'grise))
           ((= choix2 3) (setq val 'jaune))
           ((= choix2 4) (setq val 'verte))
           ((= choix2 5) (setq val 'rouge))
           ((= choix2 6) (setq val 'marron)))))
       ((equal attribute 'cheveux)
        (format t "~%De quelle couleur sont les cheveux du personnage ?")
        (format t "~%~t1. Blonds")
        (format t "~%~t2. Blonds clairs")
        (format t "~%~t3. Bruns")
        (format t "~%~t4. Châtains")
        (format t "~%~t5. Rouges")
        (format t "~%~t6. Oranges")
        (format t "~%~t7. Aucuns (chauve)")
        (format t "~%Choisissez une option : ")
        (let ((choix2 (get-value 1 7)))
          (cond
           ((= choix2 1) (setq val 'blonds))
           ((= choix2 2) (setq val 'blonds_clairs))
           ((= choix2 3) (setq val 'bruns))
           ((= choix2 4) (setq val 'chatains))
           ((= choix2 5) (setq val 'rouges))
           ((= choix2 6) (setq val 'oranges))
           ((= choix2 7) (setq val 'aucuns)))))
       ((equal attribute 'couvre_chef)
        (format t "~%Quel est le couvre-chef du personnage ?")
        (format t "~%~t1. Casquette")
        (format t "~%~t2. Couronne")
        (format t "~%~t3. Casque")
        (format t "~%~t4. Aucun")
        (format t "~%Choisissez une option : ")
        (let ((choix2 (get-value 1 4)))
          (cond
           ((= choix2 1) (setq val 'casquette))
           ((= choix2 2) (setq val 'couronne))
           ((= choix2 3) (setq val 'casque))
           ((= choix2 4) (setq val 'aucun)))))
       ((equal attribute 'yeux)
        (format t "~%De quelle couleur sont les yeux du personnage ?")
        (format t "~%~t1. Bleus")
        (format t "~%~t2. Noirs")
        (format t "~%~t3. Verts")
        (format t "~%~t4. Jaunes")
        (format t "~%~t5. Rouges")
        (format t "~%Choisissez une option : ")
        (let ((choix2 (get-value 1 5)))
          (cond
           ((= choix2 1) (setq val 'bleus))
           ((= choix2 2) (setq val 'noirs))
           ((= choix2 3) (setq val 'verts))
           ((= choix2 4) (setq val 'jaunes))
           ((= choix2 5) (setq val 'rouges)))))
       ((equal attribute 'sexe)
        (format t "~%De quel sexe est le personnage ?")
        (format t "~%~t1. Homme")
        (format t "~%~t2. Femme")
        (format t "~%~t3. Autre")
        (format t "~%Choisissez une option : ")
        (let ((choix2 (get-value 1 3)))
          (cond
           ((= choix2 1) (setq val 'homme))
           ((= choix2 2) (setq val 'femme))
           ((= choix2 3) (setq val 'autre)))))
       ((equal attribute 'dents)
        (format t "~%Les dents du personnage sont-elles visibles ?")
        (format t "~%~t1. Oui")
        (format t "~%~t2. Non")
        (format t "~%Choisissez une option : ")
        (let ((choix2 (get-value 1 3)))
          (cond
           ((= choix2 1) (setq val 'visibles))
           ((= choix2 2) (setq val 'pas_visibles)))))
       ((equal attribute 'camp)
        (format t "~%Dans quel 'camp' se trouve le personnage ?")
        (format t "~%~t1. Gentil")
        (format t "~%~t2. Méchant")
        (format t "~%Choisissez une option : ")
        (let ((choix2 (get-value 1 2)))
          (cond
           ((= choix2 1) (setq val 'gentil))
           ((= choix2 2) (setq val 'méchant)))))
       ((equal attribute 'moustache)
        (format t "~%Est-ce que le personnage possède une moustache ?")
        (format t "~%~t1. Oui")
        (format t "~%~t2. Non")
        (format t "~%Choisissez une option : ")
        (let ((choix2 (get-value 1 3)))
          (cond
           ((= choix2 1) (setq val 'V))
           ((= choix2 2) (setq val 'F)))))
       ((equal attribute 'mince)
        (format t "~%Est-ce que le personnage est mince ?")
        (format t "~%~t1. Oui")
        (format t "~%~t2. Non")
        (format t "~%Choisissez une option : ")
        (let ((choix2 (get-value 1 3)))
          (cond
           ((= choix2 1) (setq val 'V))
           ((= choix2 2) (setq val 'F)))))
       (t (error "~%Personnage introuvable")))
      (push (cons attribute (cons val NIL)) bdf) ; ajout de la réponse de l'utilisateur à la bdf
      bdf)))


(defun chainage-avant (bdf bdr attributes &optional multiplayer)
  (if (assoc 'nom bdf)
      (progn
        (format t "~%Le personnage est : ~a" (cadr (assoc 'nom bdf)))
        (return-from chainage-avant))
    (let ((bdf_initiale bdf))
      (dolist (regle bdr)
        (let ((premisses (getPremisses regle)) (conclusion (getCcl regle)))
          (if (satisfaites-p premisses bdf)
              (if (not (liste-membre-p conclusion bdf))
                  (push conclusion bdf)))))
      ;(print bdf)
      (when (and (null attributes) (not (assoc 'nom bdf)))
        (error "Impossible de déterminer le personnage"))
      (if (not multiplayer)
          (progn
            (when (equal bdf bdf_initiale)
              (setq bdf (deviner-personnage-ia bdf attributes)))
            (chainage-avant bdf bdr attributes))
        (if (not (assoc 'nom bdf))
            (if (not (equal bdf bdf_initiale))
                (chainage-avant bdf bdr attributes T)
              (setq bdf (deviner-personnage-ia bdf attributes)))
          bdf))
        )))

;(setq bf '((peau grise)))
;(chainage-avant bf *BR*)


(defun deviner-personnage-aleatoire (bdf perso)
  (format t "~%Quelle question voulez-vous poser ?")
  (format t "~%~t1. Espece")
  (format t "~%~t2. Peau")
  (format t "~%~t3. Cheveux")
  (format t "~%~t4. Couvre-chef")
  (format t "~%~t5. Yeux")
  (format t "~%~t6. Sexe")
  (format t "~%~t7. Dents")
  (format t "~%~t8. Camp")
  (format t "~%~t9. Moustache")
  (format t "~%~t10. Corpulence")
  (format t "~%~t11. Take a guess !")
  (format t "~%Choisissez une option : ")
  (let ((choix (get-value 1 11)) attribute)
    (cond
     ((= choix 1)
      (setq attribute 'espece)
      (format t "~%Votre question : Est-ce que le personnage est un :")
      (format t "~%~t1. Humain")
      (format t "~%~t2. Singe")
      (format t "~%~t3. Reptile")
      (format t "~%~t4. Autre")
      (format t "~%Choisissez une option : ")
      (let ((choix2 (get-value 1 4)) val)
        (cond
         ((= choix2 1) (setq val 'humain))
         ((= choix2 2) (setq val 'singe))
         ((= choix2 3) (setq val 'reptile))
         ((= choix2 4) (setq val 'autre)))
        (format t "~%La réponse à la question 'Est-ce que le personnage est un ~a ?' est : ~a" val (if (liste-membre-p (list attribute val) bdf) "oui" "non"))))
     ((= choix 2)
      (setq attribute 'peau)
      (format t "~%Votre question : Est-ce que la peau du personnage est :")
      (format t "~%~t1. Blanche")
      (format t "~%~t2. Grise")
      (format t "~%~t3. Jaune")
      (format t "~%~t4. Verte")
      (format t "~%~t5. Rouge")
      (format t "~%~t6. Marron")
      (format t "~%Choisissez une option : ")
      (let ((choix2 (get-value 1 6)) val)
        (cond
         ((= choix2 1) (setq val 'blanche))
         ((= choix2 2) (setq val 'grise))
         ((= choix2 3) (setq val 'jaune))
         ((= choix2 4) (setq val 'verte))
         ((= choix2 5) (setq val 'rouge))
         ((= choix2 6) (setq val 'marron)))
        (format t "~%La réponse à la question 'Est-ce que la peau du personnage est ~a ?' est : ~a" val (if (liste-membre-p (list attribute val) bdf) "oui" "non"))))
     ((= choix 3)
      (setq attribute 'cheveux)
      (format t "~%Votre question : Est-ce que les cheveux du personnage sont :")
      (format t "~%~t1. Blonds")
      (format t "~%~t2. Blonds clairs")
      (format t "~%~t3. Bruns")
      (format t "~%~t4. Châtains")
      (format t "~%~t5. Rouges")
      (format t "~%~t6. Oranges")
      (format t "~%~t7. Aucuns (chauve)")
      (format t "~%Choisissez une option : ")
      (let ((choix2 (get-value 1 7)) val)
        (cond
         ((= choix2 1) (setq val 'blonds))
         ((= choix2 2) (setq val 'blonds_clairs))
         ((= choix2 3) (setq val 'bruns))
         ((= choix2 4) (setq val 'chatains))
         ((= choix2 5) (setq val 'rouges))
         ((= choix2 6) (setq val 'oranges))
         ((= choix2 7) (setq val 'chauve)))
        (format t "~%La réponse à la question 'Est-ce que les cheveux du personnage sont ~a ?' est : ~a" val (if (liste-membre-p (list attribute val) bdf) "oui" "non"))))
     ((= choix 4)
      (setq attribute 'couvre_chef)
      (format t "~%Votre question : Est-ce que le couvre chef du personnage est :")
      (format t "~%~t1. Casquette")
      (format t "~%~t2. Couronne")
      (format t "~%~t3. Casque")
      (format t "~%~t4. Aucun")
      (format t "~%Choisissez une option : ")
      (let ((choix2 (get-value 1 4)) val)
        (cond
         ((= choix2 1) (setq val 'casquette))
         ((= choix2 2) (setq val 'couronne))
         ((= choix2 3) (setq val 'casque))
         ((= choix2 4) (setq val 'aucun)))
        (format t "~%La réponse à la question 'Est-ce que le couvre chef du personnage est ~a ?' est : ~a" val (if (liste-membre-p (list attribute val) bdf) "oui" "non"))))
     ((= choix 5)
      (setq attribute 'yeux)
      (format t "~%Votre question : Est-ce que les yeux du personnage sont :")
      (format t "~%~t1. Bleus")
      (format t "~%~t2. Noirs")
      (format t "~%~t3. Verts")
      (format t "~%~t4. Jaunes")
      (format t "~%~t5. Rouges")
      (format t "~%Choisissez une option : ")
      (let ((choix2 (get-value 1 5)) val)
        (cond
         ((= choix2 1) (setq val 'bleus))
         ((= choix2 2) (setq val 'noirs))
         ((= choix2 3) (setq val 'verts))
         ((= choix2 4) (setq val 'jaunes))
         ((= choix2 5) (setq val 'rouges)))
        (format t "~%La réponse à la question 'Est-ce que les yeux du personnage sont ~a ?' est : ~a" val (if (liste-membre-p (list attribute val) bdf) "oui" "non"))))
     ((= choix 6)
      (setq attribute 'sexe)
      (format t "~%Votre question : Est-ce que le genre du personnage est :")
      (format t "~%~t1. Homme")
      (format t "~%~t2. Femme")
      (format t "~%~t3. Autre")
      (format t "~%Choisissez une option : ")
      (let ((choix2 (get-value 1 3)) val)
        (cond
         ((= choix2 1) (setq val 'homme))
         ((= choix2 2) (setq val 'femme))
         ((= choix2 3) (setq val 'autre)))
        (format t "~%La réponse à la question 'Est-ce que le genre du personnage est ~a ?' est : ~a" val (if (liste-membre-p (list attribute val) bdf) "oui" "non"))))
     ((= choix 7)
      (setq attribute 'dents)
      (format t "~%La réponse à la question 'Est-ce que les dents du personnages sont visibles ?' est : ~a" (if (liste-membre-p (list attribute 'visibles) bdf) "oui" "non")))
     ((= choix 8)
      (setq attribute 'camp)
      (format t "~%Votre question : Est-ce que le personnage est :")
      (format t "~%~t1. Gentil")
      (format t "~%~t2. Méchant")
      (format t "~%Choisissez une option : ")
      (let ((choix2 (get-value 1 2)) val)
        (cond
         ((= choix2 1) (setq val 'gentil))
         ((= choix2 2) (setq val 'méchant)))
        (format t "~%La réponse à la question 'Est-ce que le personnage est ~a ?' est : ~a" val (if (liste-membre-p (list attribute val) bdf) "oui" "non"))))
     ((= choix 9)
      (setq attribute 'moustache)
      (format t "~%La réponse à la question 'Est-ce que le personnage a une moustache ?' est : ~a" (if (liste-membre-p (list attribute 'V) bdf) "oui" "non")))
     ((= choix 10)
      (setq attribute 'mince)
      (format t "~%La réponse à la question 'Est-ce que le personnage est mince ?' est : ~a" (if (liste-membre-p (list attribute 'V) bdf) "oui" "non")))
     ((= choix 11)
      (format t "~%Quel est votre guess ? : ")
      (format t "~%~t1. Mario")
      (format t "~%~t2. Luigi")
      (format t "~%~t3. Peach")
      (format t "~%~t4. Daisy")
      (format t "~%~t5. Wario")
      (format t "~%~t6. Waluigi")
      (format t "~%~t7. Yoshi")
      (format t "~%~t8. Harmonie")
      (format t "~%~t9. Donkey Kong")
      (format t "~%~t10. Diddy Kong")
      (format t "~%~t11. Bowser")
      (format t "~%~t12. Goomba")
      (format t "~%~t13. Maskass")
      (format t "~%~t14. Koopa")
      (format t "~%~t15. Topi Taupe")
      (format t "~%~t16. Bowser Jr")
      (format t "~%~t17. Boo")
      (format t "~%~t18. Frere Marto")
      (format t "~%~t19. Skelerex")
      (format t "~%~t20. Pom Pom")
      (format t "~%Choisissez une option : ")
      (let ((choix2 (get-value 1 20)) val)
        (cond
         ((= choix2 1) (setq val 'Mario))
         ((= choix2 2) (setq val 'Luigi))
         ((= choix2 3) (setq val 'Peach))
         ((= choix2 4) (setq val 'Daisy))
         ((= choix2 5) (setq val 'Wario))
         ((= choix2 6) (setq val 'Waluigi))
         ((= choix2 7) (setq val 'Yoshi))
         ((= choix2 8) (setq val 'Harmonie))
         ((= choix2 9) (setq val 'Donkey-Kong))
         ((= choix2 10) (setq val 'Diddy-Kong))
         ((= choix2 11) (setq val 'Bowser))
         ((= choix2 12) (setq val 'Goomba))
         ((= choix2 13) (setq val 'Maskass))
         ((= choix2 14) (setq val 'Koopa))
         ((= choix2 15) (setq val 'Topi-Taupe))
         ((= choix2 16) (setq val 'Bowser-Jr))
         ((= choix2 17) (setq val 'Boo))
         ((= choix2 18) (setq val 'Frere-Marto))
         ((= choix2 19) (setq val 'Skelerex))
         ((= choix2 20) (setq val 'Pom-Pom)))
        (when (equal perso val) ; vérification du choix de l'utilisateur
          (format t "~%C'est correct! Bravo!")
          (return-from deviner-personnage-aleatoire T))
        (format t "~%C'est incorrect :("))))
    ))
      

(defun get-attributes (bdr perso)
  (let (bdf)
    (dolist (regle bdr bdf)
      (let ((conclusion (getCcl regle)) (premisses (getPremisses regle)))
        (if (equal conclusion (list 'nom perso))
            (push premisses bdf))))))

;(get-attributes *BR2* 'Yoshi)

(defun chainage-arriere (bdf bdr characters)
  (let ((perso (choose-random-element characters))) ; séléction aléatoire d'un personnage dans la liste de personnages
    (setq bdf (car (get-attributes bdr perso))) ; récupération de tous les attributs liés au personnage choisi
    (if (null bdf)
        (format t "Impossible de déterminer le personnage.")
      (loop
        (let ((result (deviner-personnage-aleatoire bdf perso)))
          (when result  ; quand result n'est pas nil, on sort de la boucle
            (return result))))
      )))

;(chainage-arriere '(()) *BR*)


(defun multiplayer (bdr1 bdr2 attributes characters)
  (let ((perso (choose-random-element characters)) bdf_ia bdf_joueur result_ia)
    (setq bdf_ia (car (get-attributes bdr2 perso)))
    (loop while (not (or result_ia (assoc 'nom bdf_joueur)))
        do
          (progn
            ;Joueur:
            (format t "~%C'est à vous de jouer :")
            (setq result_ia (deviner-personnage-aleatoire bdf_ia perso))
            (when result_ia
              (return result_ia))
          ;IA:
            (format t "~%C'est au tour de l'IA :")
            (setq attributes (remove-useless-attributes attributes bdf_joueur))
            (setq bdf_joueur (chainage-avant bdf_joueur bdr1 attributes T))
          ))
    (if result_ia
        (format t "~%Vous avez gagné !")
      (format t "~%L'IA a gagné ! Votre personnage était ~a" (cadr (assoc 'nom bdf_joueur))))))


(defun menu_jeu ()
  (let (choix (all_attributes '(espece peau cheveux couvre_chef yeux sexe dents camp moustache mince)) (all_characters '(Mario Luigi Peach Daisy Wario Waluigi Yoshi Harmonie Donkey-Kong Diddy-Kong Bowser Goomba Maskass Koopa Topi-Taupe Bowser-Jr Boo Frere-Marto Skelerex Pom-Pom)))
    (loop while (or (not (numberp choix)) (not (= choix 4)))
          do
          (format t "~%Menu :~%")
          (format t "1. Faire deviner un personnage à l'IA (chaînage avant)~%")
          (format t "2. Deviner un personnage choisi aléatoirement par l'IA~%")
          (format t "3. Jouer contre l'IA~%")
          (format t "4. Quitter~%")
          (format t "Choisissez une option : ")
          (setq choix (get-value 1 4))
            (cond
             ((= choix 1) (chainage-avant '() *BR* all_attributes))
             ((= choix 2) (chainage-arriere '() *BR2* all_characters))
             ((= choix 3) (multiplayer *BR* *BR2* all_attributes all_characters))
             ((= choix 4) (format t "Au revoir !")))
            )))
    
(menu_jeu)